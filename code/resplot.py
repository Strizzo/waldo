import torch as th
from matplotlib import pyplot as plt



def plot_rows(images,args,encoder, save=False, filename="./images/reconstructions.png", 
              width=16, height=6.55, optimizer_name="Adam", 
              decoders = [], 
              seed=100, padding=False):
    
    # this function plots a set of 10 original images along with the reconstructions
    # of those images generated by each of our implemented auto-encoders
    
    th.manual_seed(seed)
    
    plot_images = []
    
    plot_images.append(images[5:15].detach().cpu().numpy())

    # encode and decode images and save decoded results for plotting
    z_reps = encoder(images)
    
    for decoder in decoders:
        plot_images.append(decoder(z_reps)[5:15].detach().cpu().numpy())

    # plot results to 4 separate rows
    fig, axes = plt.subplots(3, 10, figsize=(width, height))

    for row, ax in enumerate(axes):
        for i, img in enumerate(ax): 
            ax[i].imshow(plot_images[row][i,0], cmap='gray' )
            ax[i].axis('off')
            ax[i].set_aspect('equal')

    plt.suptitle("Original images (row 1) compared to reconstructions "\
                 "for WAE (row 2) implementations", y=0.92, fontsize=14)

    # add footnote with relevant model parameters
    figtext_text = "Parameters used: latent dimension size ({0}), hidden layer size ({1}), "\
                "epochs ({2}), batch size ({3}), optimizer ({4}), \n learning rate ({5}), "\
                "WAE sigma ({6}), WAE lambda ({7}), Subspace Reg. ({8}), Lipschitz ({9})".format(args["n_z"], 
                                                                                     args["dim_h"], 
                                                                                     args["epochs"],
                                                                                     args["batch_size"], 
                                                                                     optimizer_name, 
                                                                                     args["lr"], 
                                                                                     args["sigma"], 
                                                                                     args["wae"],
                                                                                    args['subspace_reg'],
                                                                                    args['lipschitz'])

    plt.figtext(.5, 0.12, figtext_text, fontsize=14, va="top", ha="center")

    plt.subplots_adjust(wspace=0, hspace=0)
    
    if save:
        if padding:
            plt.savefig(filename)
        else:
            plt.savefig(filename, bbox_inches = 'tight', pad_inches = 0)
        plt.close('all')
